{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mjsan\\\\mi-aplicacion-react\\\\Frontend\\\\src\\\\components\\\\Mensajes.js\";\nimport React, { useState, useEffect, useContext, useRef } from 'react';\nimport axios from 'axios';\nimport { AuthContext } from './AuthContext';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nfunction Mensajes() {\n  const {\n    usuario\n  } = useContext(AuthContext);\n  const [mensajesEnviados, setMensajesEnviados] = useState([]);\n  const [mensajesRecibidos, setMensajesRecibidos] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [nuevoMensaje, setNuevoMensaje] = useState('');\n  const [mensajeAResponder, setMensajeAResponder] = useState(null);\n  const [nombresUsuarios, setNombresUsuarios] = useState({});\n  const [showRecibidos, setShowRecibidos] = useState(false);\n  const [showEnviados, setShowEnviados] = useState(false);\n  const isMounted = useRef(true);\n  const obtenerNombreUsuarioPorId = async userId => {\n    try {\n      const response = await axios.get(`http://localhost:5000/api/Users/${userId}`);\n      return response.data.NombreUsuario; // Asume que la respuesta tiene una propiedad NombreUsuario\n    } catch (error) {\n      console.error('Error al obtener el nombre del usuario', error);\n      return 'Desconocido'; // Nombre por defecto en caso de error\n    }\n  };\n\n  const cargarMensajes = async () => {\n    if (isMounted.current && (usuario === null || usuario === void 0 ? void 0 : usuario.userId)) {\n      setIsLoading(true);\n      try {\n        const enviados = await axios.get(`http://localhost:5000/api/mensajes/enviados/${usuario.userId}`);\n        const recibidos = await axios.get(`http://localhost:5000/api/mensajes/usuario/${usuario.userId}`);\n        const nombres = {};\n        // Obtener nombres de los emisores y receptores de los mensajes\n        const idsUsuarios = new Set([...enviados.data, ...recibidos.data].map(m => [m.Emisor_Id, m.Receptor_Id]).flat());\n        const promesasNombres = Array.from(idsUsuarios).map(id => obtenerNombreUsuarioPorId(id));\n        const resultadosNombres = await Promise.all(promesasNombres);\n\n        // Asignar nombres obtenidos a su respectivo ID\n        Array.from(idsUsuarios).forEach((id, index) => {\n          nombres[id] = resultadosNombres[index];\n        });\n        setNombresUsuarios(nombres);\n        if (Array.isArray(enviados.data) && Array.isArray(recibidos.data)) {\n          setMensajesEnviados(enviados.data);\n          setMensajesRecibidos(recibidos.data);\n        } else {\n          console.error('Los datos recibidos no son una lista');\n        }\n      } catch (error) {\n        console.error('Error al obtener mensajes', error);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  };\n  useEffect(() => {\n    console.log('Mensajes cargados:', mensajesRecibidos, mensajesEnviados);\n    cargarMensajes();\n    const interval = (usuario === null || usuario === void 0 ? void 0 : usuario.userId) ? setInterval(cargarMensajes, 60000) : null;\n    return () => {\n      clearInterval(interval);\n      isMounted.current = false;\n    };\n  }, [usuario]);\n  useEffect(() => {\n    console.log('Mensaje a responder:', mensajeAResponder);\n  }, [mensajeAResponder]);\n  const responderMensaje = async mensajeParaResponder => {\n    if (nuevoMensaje.trim()) {\n      try {\n        const response = await axios.post('http://localhost:5000/api/mensajes/crear', {\n          emisorId: usuario.userId,\n          receptorId: mensajeParaResponder.Emisor_Id,\n          mensaje: nuevoMensaje,\n          productoId: mensajeParaResponder.Producto_Id\n        });\n        console.log(response.data);\n        setNuevoMensaje('');\n        setMensajeAResponder(null);\n        await cargarMensajes();\n      } catch (error) {\n        console.error('Error al responder mensaje', error);\n      }\n    }\n  };\n  const marcarComoLeido = async mensajeId => {\n    try {\n      const response = await axios.put(`http://localhost:5000/api/mensajes/marcar-leido/${mensajeId}`);\n      alert(response.data.message);\n      await cargarMensajes();\n    } catch (error) {\n      console.error('Error al marcar mensaje como leído', error);\n      alert('Error al marcar mensaje como leído');\n    }\n  };\n  const seleccionarMensajeParaResponder = mensaje => {\n    console.log('Mensaje seleccionado para responder:', mensaje);\n    setMensajeAResponder(mensaje);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"my-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }, \"Mensajes\"), isLoading && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 27\n    }\n  }, \"Cargando mensajes...\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-link\",\n    onClick: () => setShowRecibidos(!showRecibidos),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 21\n    }\n  }, \"Mensajes Recibidos\")), showRecibidos && !isLoading && mensajesRecibidos.length === 0 && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 83\n    }\n  }, \"No has recibido mensajes.\"), showRecibidos && !isLoading && mensajesRecibidos.map(mensaje => /*#__PURE__*/React.createElement(\"div\", {\n    key: mensaje.Id,\n    className: \"card mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"card-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 54\n    }\n  }, \"De:\"), \" \", nombresUsuarios[mensaje.Emisor_Id]), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"card-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 54\n    }\n  }, \"Mensaje:\"), \" \", mensaje.Mensaje), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-secondary\",\n    onClick: () => marcarComoLeido(mensaje.Id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 29\n    }\n  }, \"Marcar como Le\\xEDdo\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-primary\",\n    onClick: () => setMensajeAResponder(mensaje),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 29\n    }\n  }, \"Responder\"), mensajeAResponder && mensajeAResponder.Id === mensaje.Id && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"textarea\", {\n    className: \"form-control\",\n    value: nuevoMensaje,\n    onChange: e => setNuevoMensaje(e.target.value),\n    placeholder: \"Escribe tu respuesta aqu\\xED...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 37\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-primary mt-2\",\n    onClick: () => responderMensaje(mensaje),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 37\n    }\n  }, \"Enviar Respuesta\")))))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-link\",\n    onClick: () => setShowEnviados(!showEnviados),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 21\n    }\n  }, \"Mensajes Enviados\")), showEnviados && !isLoading && mensajesEnviados.length === 0 && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 81\n    }\n  }, \"No has enviado mensajes.\"), showEnviados && !isLoading && mensajesEnviados.map(mensaje => /*#__PURE__*/React.createElement(\"div\", {\n    key: mensaje.Id,\n    className: \"card mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"card-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 54\n    }\n  }, \"Para:\"), \" \", nombresUsuarios[mensaje.Receptor_Id]), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"card-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 54\n    }\n  }, \"Mensaje:\"), \" \", mensaje.Mensaje), mensaje.Respuesta && /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-primary\",\n    onClick: () => seleccionarMensajeParaResponder(mensaje),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 33\n    }\n  }, \"Ver Respuesta\"))))));\n}\nexport default Mensajes;\n//respaldo","map":{"version":3,"names":["React","useState","useEffect","useContext","useRef","axios","AuthContext","Mensajes","usuario","mensajesEnviados","setMensajesEnviados","mensajesRecibidos","setMensajesRecibidos","isLoading","setIsLoading","nuevoMensaje","setNuevoMensaje","mensajeAResponder","setMensajeAResponder","nombresUsuarios","setNombresUsuarios","showRecibidos","setShowRecibidos","showEnviados","setShowEnviados","isMounted","obtenerNombreUsuarioPorId","userId","response","get","data","NombreUsuario","error","console","cargarMensajes","current","enviados","recibidos","nombres","idsUsuarios","Set","map","m","Emisor_Id","Receptor_Id","flat","promesasNombres","Array","from","id","resultadosNombres","Promise","all","forEach","index","isArray","log","interval","setInterval","clearInterval","responderMensaje","mensajeParaResponder","trim","post","emisorId","receptorId","mensaje","productoId","Producto_Id","marcarComoLeido","mensajeId","put","alert","message","seleccionarMensajeParaResponder","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","key","Id","Mensaje","value","onChange","e","target","placeholder","Respuesta"],"sources":["C:/Users/mjsan/mi-aplicacion-react/Frontend/src/components/Mensajes.js"],"sourcesContent":["import React, { useState, useEffect, useContext, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport { AuthContext } from './AuthContext';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction Mensajes() {\r\n    const { usuario } = useContext(AuthContext);\r\n    const [mensajesEnviados, setMensajesEnviados] = useState([]);\r\n    const [mensajesRecibidos, setMensajesRecibidos] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [nuevoMensaje, setNuevoMensaje] = useState('');\r\n    const [mensajeAResponder, setMensajeAResponder] = useState(null);\r\n    const [nombresUsuarios, setNombresUsuarios] = useState({});\r\n    const [showRecibidos, setShowRecibidos] = useState(false);\r\n    const [showEnviados, setShowEnviados] = useState(false);\r\n    const isMounted = useRef(true);\r\n\r\n    const obtenerNombreUsuarioPorId = async (userId) => {\r\n        try {\r\n            const response = await axios.get(`http://localhost:5000/api/Users/${userId}`);\r\n            return response.data.NombreUsuario; // Asume que la respuesta tiene una propiedad NombreUsuario\r\n        } catch (error) {\r\n            console.error('Error al obtener el nombre del usuario', error);\r\n            return 'Desconocido'; // Nombre por defecto en caso de error\r\n        }\r\n    };\r\n\r\n    const cargarMensajes = async () => {\r\n        if (isMounted.current && usuario?.userId) {\r\n            setIsLoading(true);\r\n            try {\r\n                const enviados = await axios.get(`http://localhost:5000/api/mensajes/enviados/${usuario.userId}`);\r\n                const recibidos = await axios.get(`http://localhost:5000/api/mensajes/usuario/${usuario.userId}`);\r\n                const nombres = {};\r\n                // Obtener nombres de los emisores y receptores de los mensajes\r\n                const idsUsuarios = new Set([...enviados.data, ...recibidos.data].map(m => [m.Emisor_Id, m.Receptor_Id]).flat());\r\n                const promesasNombres = Array.from(idsUsuarios).map(id => obtenerNombreUsuarioPorId(id));\r\n                const resultadosNombres = await Promise.all(promesasNombres);\r\n        \r\n                // Asignar nombres obtenidos a su respectivo ID\r\n                Array.from(idsUsuarios).forEach((id, index) => {\r\n                    nombres[id] = resultadosNombres[index];\r\n                });\r\n        \r\n                setNombresUsuarios(nombres);\r\n\r\n                if (Array.isArray(enviados.data) && Array.isArray(recibidos.data)) {\r\n                    setMensajesEnviados(enviados.data);\r\n                    setMensajesRecibidos(recibidos.data);\r\n                } else {\r\n                    console.error('Los datos recibidos no son una lista');\r\n                }\r\n            } catch (error) {\r\n                console.error('Error al obtener mensajes', error);\r\n            } finally {\r\n                setIsLoading(false);\r\n            }\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        console.log('Mensajes cargados:', mensajesRecibidos, mensajesEnviados);\r\n        cargarMensajes();\r\n        const interval = usuario?.userId ? setInterval(cargarMensajes, 60000) : null;\r\n\r\n        return () => {\r\n            clearInterval(interval);\r\n            isMounted.current = false;\r\n        };\r\n    }, [usuario]);\r\n\r\n    useEffect(() => {\r\n        console.log('Mensaje a responder:', mensajeAResponder);\r\n    }, [mensajeAResponder]);\r\n\r\n\r\n\r\n    const responderMensaje = async (mensajeParaResponder) => {\r\n        if (nuevoMensaje.trim()) {\r\n            try {\r\n                const response = await axios.post('http://localhost:5000/api/mensajes/crear', {\r\n                    emisorId: usuario.userId,\r\n                    receptorId: mensajeParaResponder.Emisor_Id,\r\n                    mensaje: nuevoMensaje,\r\n                    productoId: mensajeParaResponder.Producto_Id\r\n                });\r\n                console.log(response.data);\r\n                setNuevoMensaje('');\r\n                setMensajeAResponder(null);\r\n                await cargarMensajes();\r\n            } catch (error) {\r\n                console.error('Error al responder mensaje', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const marcarComoLeido = async (mensajeId) => {\r\n        try {\r\n            const response = await axios.put(`http://localhost:5000/api/mensajes/marcar-leido/${mensajeId}`);\r\n            alert(response.data.message);\r\n            await cargarMensajes();\r\n        } catch (error) {\r\n            console.error('Error al marcar mensaje como leído', error);\r\n            alert('Error al marcar mensaje como leído');\r\n        }\r\n    };\r\n\r\n    const seleccionarMensajeParaResponder = (mensaje) => {\r\n        console.log('Mensaje seleccionado para responder:', mensaje);\r\n        setMensajeAResponder(mensaje);\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h2 className=\"my-3\">Mensajes</h2>\r\n            {isLoading && <p>Cargando mensajes...</p>}\r\n    \r\n            {/* Mensajes recibidos */}\r\n            <div>\r\n                <button\r\n                    className=\"btn btn-link\"\r\n                    onClick={() => setShowRecibidos(!showRecibidos)}\r\n                >\r\n                    <h3>Mensajes Recibidos</h3>\r\n                </button>\r\n                {showRecibidos && !isLoading && mensajesRecibidos.length === 0 && <p>No has recibido mensajes.</p>}\r\n                {showRecibidos && !isLoading && mensajesRecibidos.map((mensaje) => (\r\n                    <div key={mensaje.Id} className=\"card mb-2\">\r\n                        <div className=\"card-body\">\r\n                            <p className=\"card-text\"><strong>De:</strong> {nombresUsuarios[mensaje.Emisor_Id]}</p>\r\n                            <p className=\"card-text\"><strong>Mensaje:</strong> {mensaje.Mensaje}</p>\r\n                            <button className=\"btn btn-secondary\" onClick={() => marcarComoLeido(mensaje.Id)}>Marcar como Leído</button>\r\n                            <button className=\"btn btn-primary\" onClick={() => setMensajeAResponder(mensaje)}>Responder</button>\r\n                            {mensajeAResponder && mensajeAResponder.Id === mensaje.Id && (\r\n                                <div className=\"mb-3\">\r\n                                    <textarea\r\n                                        className=\"form-control\"\r\n                                        value={nuevoMensaje}\r\n                                        onChange={(e) => setNuevoMensaje(e.target.value)}\r\n                                        placeholder=\"Escribe tu respuesta aquí...\"\r\n                                    />\r\n                                    <button\r\n                                        className=\"btn btn-primary mt-2\"\r\n                                        onClick={() => responderMensaje(mensaje)}\r\n                                    >\r\n                                        Enviar Respuesta\r\n                                    </button>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n    \r\n            {/* Mensajes enviados */}\r\n            <div>\r\n                <button\r\n                    className=\"btn btn-link\"\r\n                    onClick={() => setShowEnviados(!showEnviados)}\r\n                >\r\n                    <h3>Mensajes Enviados</h3>\r\n                </button>\r\n                {showEnviados && !isLoading && mensajesEnviados.length === 0 && <p>No has enviado mensajes.</p>}\r\n                {showEnviados && !isLoading && mensajesEnviados.map((mensaje) => (\r\n                    <div key={mensaje.Id} className=\"card mb-2\">\r\n                        <div className=\"card-body\">\r\n                            <p className=\"card-text\"><strong>Para:</strong> {nombresUsuarios[mensaje.Receptor_Id]}</p>\r\n                            <p className=\"card-text\"><strong>Mensaje:</strong> {mensaje.Mensaje}</p>\r\n                            {mensaje.Respuesta && (\r\n                                <button className=\"btn btn-primary\" onClick={() => seleccionarMensajeParaResponder(mensaje)}>Ver Respuesta</button>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n    \r\n}\r\nexport default Mensajes;\r\n//respaldo"],"mappings":"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"},"metadata":{},"sourceType":"module"}